# Name of your application. Used to uniquely configure containers.
service: marine-defrag-api

# Name of the container image.
image: marine-defrag/marine-defrag-server

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV.fetch("DEPLOY_SSH_HOST") %>
    labels:
      traefik.http.routers.api.entrypoints: websecure
      traefik.http.routers.api.rule: Host(`<%= ENV.fetch("DEPLOY_WEB_HOST") %>`)
      traefik.http.routers.api.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: <%= ENV.fetch("DEPLOY_REGISTRY") %>
  username: DEPLOY_USERNAME

  # Always use an access token rather than real password when possible.
  password:
    - DEPLOY_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:

    RAILS_SERVE_STATIC_FILES: true
    RUBY_YJIT_ENABLE: 1
    DEPLOY_REGISTRY: ghcr.io
    DEPLOY_SSH_HOST: api.marine-defrag.org
  secret:
    - DEPLOY_LETSENCRYPT_EMAIL
    - DEPLOY_REGISTRY_PASSWORD
    - DEPLOY_USERNAME
    - DEPLOY_WEB_HOST
    - POSTGRES_DB
    - POSTGRES_PASSWORD
    - POSTGRES_USER
    - RAILS_MASTER_KEY
    - FEEDBACK_EMAIL_ADDRESS
    - SMTP_SERVER
    - SMTP_PORT
    - SMTP_PASSWORD
    - SMTP_LOGIN
    - SMTP_DOMAIN

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  postgres:
    image: postgres:15
    host: <%= ENV.fetch("DEPLOY_SSH_HOST") %>
    port: 5432
    # roles:
    #   - web
    env:
      clear:
        POSTGRES_USER: <%= ENV.fetch("POSTGRES_USER") %>
        POSTGRES_DB: <%= ENV.fetch("POSTGRES_DB") %>
      secret:
        POSTGRES_PASSWORD: <%= ENV.fetch("POSTGRES_PASSWORD") %>
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data

#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik. Be sure to reboot traefik when you modify it.
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt:/letsencrypt" # To save the configuration file.
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "<%= ENV.fetch("DEPLOY_LETSENCRYPT_EMAIL") %>"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json" # Must match the path in `volume`
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web # Must match the role in `servers`


# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
